Grammar
=======
# METHOD_BODY = STATEMENT_LIST
# STATEMENT_LIST = STATEMENT | STATEMENT_LIST STATEMENT
# STATEMENT = DECLARATION
| IF
| WHILE
| ASSIGNMENT
# DECLARATION = PRIMITIVE_TYPE 'id' ';'
# PRIMITIVE_TYPE = 'int' | 'float'
# IF = 'if' '(' EXPRESSION ')' '{' STATEMENT '}' 'else' '{' STATEMENT '}'
# WHILE = 'while' '(' EXPRESSION ')' '{' STATEMENT '}'
# ASSIGNMENT = 'id' '=' EXPRESSION ';'
# EXPRESSION = SIMPLE_EXPRESSION
| SIMPLE_EXPRESSION 'relop' SIMPLE_EXPRESSION
# SIMPLE_EXPRESSION =  TERM | SIGN TERM | SIMPLE_EXPRESSION 'addop' TERM
# TERM = FACTOR | TERM 'mulop' FACTOR
# FACTOR = 'id' | 'num' | '(' EXPRESSION ')'
# SIGN = '+' | '-'

Modified Grammar
================
# METHOD_BODY = STATEMENT_LIST
# STATEMENT_LIST = STATEMENT STATEMENT_LIST&
# STATEMENT_LIST& = STATEMENT STATEMENT_LIST& | '\L'
# STATEMENT = DECLARATION
| IF
| WHILE
| ASSIGNMENT
# DECLARATION = PRIMITIVE_TYPE 'id' ';'
# PRIMITIVE_TYPE = 'int' | 'float'
# IF = 'if' '(' EXPRESSION ')' '{' STATEMENT '}' 'else' '{' STATEMENT '}'
# WHILE = 'while' '(' EXPRESSION ')' '{' STATEMENT '}'
# ASSIGNMENT = 'id' '=' EXPRESSION ';'
# EXPRESSION = SIMPLE_EXPRESSION EXPRESSION&
# EXPRESSION& = 'relop' SIMPLE_EXPRESSION | '\L'
# SIMPLE_EXPRESSION = TERM SIMPLE_EXPRESSION& | SIGN TERM SIMPLE_EXPRESSION&
# SIMPLE_EXPRESSION& = 'addop' TERM SIMPLE_EXPRESSION& | '\L'
# TERM = FACTOR TERM&
# TERM& = 'mulop' FACTOR TERM& | '\L'
# FACTOR = 'id' | 'num' | '(' EXPRESSION ')'
# SIGN = '+' | '-'


Program 1
=========
int  count ;
while (pass != 10)  {
pass = pass + 1 ;
}
if (mnt <= 0) {
count = count + 1.234;
}
else{
sum = sum + mnt;
}


Program 2
=========
int  count ;
while (pass != 10)  {
pass = pass + 1 ;

if (mnt <= 0) ) {
count = count + 1.234;
}
else{
sum = sum + mnt;
}
